const fs = require("fs")
const path = require("path")
const PDFDocument = require("pdfkit")

// Generate PDF from slides
exports.generatePdfFromSlides = async (slidesDir, outputPath) => {
  return new Promise((resolve, reject) => {
    try {
      // Get all PNG files in the directory
      const slideImages = fs
        .readdirSync(slidesDir)
        .filter((file) => file.endsWith(".png") && file.startsWith("slide_"))
        .sort() // Ensure the slides are in order

      if (slideImages.length === 0) {
        reject(new Error("No slide images found"))
        return
      }

      // Create a new PDF document
      const doc = new PDFDocument({
        autoFirstPage: false,
        info: {
          Title: "Extracted Slides",
          Author: "YouTube Slide Extractor",
          Subject: "Slides extracted from YouTube video",
          Keywords: "slides, youtube, extraction",
          CreationDate: new Date(),
        },
      })

      const writeStream = fs.createWriteStream(outputPath)

      // Pipe the PDF to the output file
      doc.pipe(writeStream)

      // Add each slide to the PDF
      slideImages.forEach((slide, index) => {
        const slidePath = path.join(slidesDir, slide)

        // Add a new page for each slide with landscape orientation and no margin
        doc.addPage({ size: 'A4', layout: 'landscape', margin: 0 })

        // Calculate dimensions to fit the image within the page while preserving aspect ratio
        const pageWidth = doc.page.width
        const pageHeight = doc.page.height
        // Fit the image to the page (with max width/height)
        doc.image(slidePath, 0, 0, {
          fit: [pageWidth, pageHeight],
          align: 'center',
          valign: 'center',
        })

        // Add page number
        doc
          .fontSize(10)
          .fillColor("#666666")
          .text(`${index + 1} / ${slideImages.length}`, doc.page.width - 50, doc.page.height - 25, { align: "right" })
      })

      // Add a cover page at the beginning
      doc.addPage({ front: true })
      doc.fontSize(24).fillColor("#333333").text("Extracted Slides", { align: "center" }).moveDown(2)

      doc
        .fontSize(14)
        .fillColor("#666666")
        .text(`Total slides: ${slideImages.length}`, { align: "center" })
        .moveDown(0.5)
        .text(`Generated on: ${new Date().toLocaleDateString()}`, { align: "center" })
        .moveDown(2)

      doc.fontSize(12).fillColor("#999999").text("Generated by YouTube Slide Extractor", { align: "center" })

      // Finalize the PDF
      doc.end()

      writeStream.on("finish", () => {
        resolve()
      })

      writeStream.on("error", (error) => {
        reject(error)
      })
    } catch (error) {
      reject(error)
    }
  })
}
